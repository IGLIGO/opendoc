

=================
Class C
=================

总览
#################

``Class C`` 为手表类蓝牙产品数据通信协议

为了满足如下需求设计此协议：

- 统一协议接口，使得研发、生产、测试和使用能够在统一的协议框架下进行。
- 提供一个具有后向兼容性的，可方便扩展，逻辑清晰的通用协议。
- 兼容BLE MTU为 ``20byte`` 的情形

需求定义
====================

本设计所需满足的需求如下：

 - 易解析
 - 可扩展
 - 后向兼容
 - 流量控制（同步、异步）

最近修订历史
====================

.. list-table::

    * - 日期
      - 备注
    * - 2020-01-20
      - [v2.0.0](docs/classC/changelog.md)
    * - 2019-05-07
      - [v1.0.4](docs/classC/changelog.md)
    * - 2018-11-28
      - [v1.0.3](docs/classC/changelog.md)
    * - 2018-06-10
      - [v1.0.1](docs/classC/changelog.md)
    * - 2017-10-29
      - [v0.2.2](docs/classC/changelog.md)
    * - 2017-05-24
      - [v0.2.1](docs/classC/changelog.md)
    * - 2016-05-29
      - [v0.2](docs/classC/changelog.md)


数据帧结构
====================

.. list-table::

    * - byte
      - 0
      - 1
      - 2~n
    * - 内容
      - flowcontrol(流控)
      - length
      - payload

数据包内容
====================

数据包包含如下内容(括号中为长度)：

1. 流控信息 ``(1)``

    控制数据传输过程，提高传输可靠性，并完成差错控制

2. 数据包长度 ``(1)``

    定义当前数据包的长度

.. note::

    当传输数据包长度超过MTU长度时，第一包长度字节写入完整长度，
    后续包的长度字节均写入 ``0xFF`` ，表示为前一包内容的延续。
    最多支持长度为 ``254`` 的数据帧。

3. 载荷 ``(0~18)``

    数据载荷


向后兼容
====================

在两个设备建立连接时，需交流各自的版本。由移动端兼容设备端。

-------------

序
###################

约定
===================

.. note::
  在文档描述中 ``->MCU`` 和 ``APP->`` 均表示移动端发送至MCU，
  ``MCU->`` 和 ``->APP`` 均表示MCU发送至移动端

.. note::
  在本文档中，形如 ``13`` 的无前缀数字表示十进制数

  形如 ``0x13`` 的以 ``0x`` 为前缀的数字表示十六进制数

  形如 ``0b11011011`` 的以 ``0b`` 为前缀的数字表示二进制数

.. warning::
  在本文档中， **没有** 使用 ``BCD`` 编码

  为便于理解，在某些如时间日期等的协议描述中使用了十进制来表示，
  注意，这里举例说明，如果有描述为 ``13`` 点 ``33`` 分的时间，
  其对应十六进制描述应该为 ``0x0D`` 点 ``0x21`` 分


数据结构
===================

一个完整协议帧的格式如下表所示：

+------+--------+--------+
| byte |  内容  | 详情   |
+======+========+========+
| 0    | 流控   |        |
+------+--------+--------+
| 1    | 长度   |        |
+------+--------+--------+
| 2    |        | 索引   |
+------+        +--------+
| 3    | 载荷   | 操作数 |
+------+        +--------+
| 4~n  |        | 参数   |
+------+--------+--------+

#. 流控

  使用一个 ``byte`` ，为一个 ``0~255`` 的数值。

  作为最近发送数据包的唯一标识。对于任何数据包的返回包都应具有相同的流控数值。
  在同时乱序发送多个数据包时，流控可以用来区分各个数据包的返回包。

  为达到区分的目的，请勿连续使用相同的流控数值。一般建议采用递增的数值作为流控。

#. 长度

  表示协议帧中载荷的长度，接收方按此处长度进行解析，超出此长度定义的内容将被忽略。

#. 索引

  协议功能的第一级分类。包含在协议内容的标题中。

#. 操作数

  协议功能的第二级分类。包含在协议内容的次级标题中。

#. 参数

  具体协议相关的详细参数内容等。

-------------


内容
###################


+------+----------+----+
| 序号 | 内容     | 值 |
+======+==========+====+
| 0    | 流控     |    |
+------+----------+----+
| 1    | 载荷长度 |    |
+------+----------+----+
| 2    | 接口索引 |    |
+------+----------+----+
| 3    | 操作数   |    |
+------+----------+----+
| 4-n  | 参数     |    |
+------+----------+----+


返回错误 ``0xFF``
=======================

`0xFF`的接口索引表示返回了一个错误。

当长度为 ``3`` 时，表示返回了一个 ``16位`` 的通用错误代码。

+------+--------------------+
| Code |        含义        |
+======+====================+
| 401  | 设备未注册         |
+------+--------------------+
| 404  | 接口不存在         |
+------+--------------------+
| 405  | 无效的操作数       |
+------+--------------------+
| 406  | 无效的参数         |
+------+--------------------+
| 410  | 方法未实现或已删除 |
+------+--------------------+

例：
  ``->MCU:fc,length=3,0xAB,0x02,0x01``
  ``MCU->:fc,length=3,0xFF,0x94,0x01`` 返回错误`0x194=404`，表示接口`0xAB`不存在


时间日期 ``0x01``
=======================

0x01.获取当前时间日期
++++++++++++++++++++++++++++++++++++++++++++++++

发送：

+------+----------+------+
| 序号 |   内容   |  值  |
+======+==========+======+
| 2    | 接口索引 | 0x01 |
+------+----------+------+
| 3    | 操作数   | 0x01 |
+------+----------+------+
| 4    | 参数     | /    |
+------+----------+------+

返回：

+------+----------+---------+
| 序号 |   内容   |   值    |
+======+==========+=========+
| 2    | 接口索引 | 0x01    |
+------+----------+---------+
| 3    | 操作数   | 0x01    |
+------+----------+---------+
| 4    | 年       | 0~99    |
+------+----------+---------+
| 5    | 月       | 1~12    |
+------+----------+---------+
| 6    | 日       | 1~31    |
+------+----------+---------+
| 7    | 时       | 0~23    |
+------+----------+---------+
| 8    | 分       | 0~59    |
+------+----------+---------+
| 9    | 秒       | 0~59    |
+------+----------+---------+
| 10   | 时区时   | -12~+14 |
+------+----------+---------+
| 11   | 时区分   | -59~+59 |
+------+----------+---------+


.. note::

  + 返回的时间与日期均为 ``UTC时间`` ，时区使用 ``8位有符号数`` 表示，
    ``MCU`` 计算时区会使用时区时和时区分相加，请保证符号正确。
  + ``-6`` , ``-30`` 表示 ``UTC-6:30`` ， ``+6`` , ``+30`` 表示 ``UTC+6:30``
  + ``-6`` , ``+30`` 会计算出 ``UTC-5:30`` 的结果，为保持代码的可读性，请勿如此使用

  - 例：

    * ``->MCU:`` ``fc`` , ``length=2`` , ``0x01`` , ``0x01``
    * ``MCU->:`` ``fc`` , ``length=10`` , ``0x01`` , ``0x01`` , ``0x14`` (2020年),
      ``0x0A`` (10月) , ``0x0F`` (15日) , ``hour`` , ``minute`` , ``sec`` ,
      ``timezone-hr`` , ``timezone-min``


0x02.设置当前时间与日期
++++++++++++++++++++++++++++++++++++++++++++++++

发送：

+------+----------+---------+
| 序号 |   内容   |   值    |
+======+==========+=========+
| 2    | 接口索引 | 0x01    |
+------+----------+---------+
| 3    | 操作数   | 0x01    |
+------+----------+---------+
| 4    | 年       | 0~99    |
+------+----------+---------+
| 5    | 月       | 1~12    |
+------+----------+---------+
| 6    | 日       | 1~31    |
+------+----------+---------+
| 7    | 时       | 0~23    |
+------+----------+---------+
| 8    | 分       | 0~59    |
+------+----------+---------+
| 9    | 秒       | 0~59    |
+------+----------+---------+
| 10   | 时区时   | -12~+14 |
+------+----------+---------+
| 11   | 时区分   | -59~+59 |
+------+----------+---------+

返回ACK：

+------+------+--------+
| 序号 | 内容 |   值   |
+======+======+========+
| 0    | 流控 | 同发送 |
+------+------+--------+
| 1    | 长度 | 0      |
+------+------+--------+


.. note::

  + 当未包含时区信息(长度为8)时，视参数时间为 ``本地时间`` ，否则为 ``UTC时间``

  - 例1：

    * ``->MCU:`` ``fc`` , ``length=8`` , ``0x01`` , ``0x02`` ,
      ``year(0-99)`` , ``month`` , ``day`` , ``hour`` , ``minute`` , ``sec``
    * ``MCU->:`` ``ACK``

  - 例2：

    * ``->MCU:`` ``fc`` , ``length=10`` , ``0x01`` , ``0x02`` ,
      ``year(0-99)`` , ``month`` , ``day`` , ``hour`` , ``minute`` , ``sec`` ,
      ``timezone-hr`` , ``timezone-min``
    * ``MCU->:`` ``ACK``


指针 ``0x02``
==============

指针参数由 ``属性`` 和对应的 ``值`` 来确定。
一般格式如下表所示：

+------------------------+-------------+
|      属性(1 byte)      | 值(n bytes) |
+========================+=============+
| * 物理位置[ ``0x01`` ] |             |
| * 逻辑位置[ ``0x02`` ] |             |
| * 运行模式[ ``0x03`` ] |  xxxx       |
+------------------------+-------------+

其中 ``物理位置`` 和 ``逻辑位置`` 的定义及指针驱动原理见 :ref:`「行针控制」 <hand_move_doc>`,
而运行模式列表如下：

+------------------------+------+
|        运行模式        | Hex  |
+========================+======+
| 正常                   | 0x00 |
+------------------------+------+
| 停针                   | 0x01 |
+------------------------+------+
| 快速正转               | 0x02 |
+------------------------+------+
| 快速反转               | 0x03 |
+------------------------+------+
| 手动调整( ``+3.5.1`` ) | 0x04 |
+------------------------+------+

.. note::
  未特殊说明时，物理位置与逻辑位置均采用 ``2`` 字节宽度

  访问 :ref:`「设备列表」 <device_list>` 获取不同设备的齿轮箱配置


0x01.获取
++++++++++

+------+----------+--------+----------------+
| 操作 | 接口索引 | 操作数 |      参数      |
+======+==========+========+================+
| 获取 | 0x02     | 0x01   | 对象,属性      |
+------+----------+--------+----------------+
| 返回 | 0x02     | 0x01   | 对象,属性,参数 |
+------+----------+--------+----------------+

例：
  * ``->MCU:`` ``fc`` , ``length=4`` , ``0x02`` , ``0x01`` ,
    ``0x01(attr1:编号01的机芯)`` , ``0x01(attr2:物理位置)``
  * ``MCU->:`` ``fc`` , ``length=6`` , ``0x02`` , ``0x01`` ,
    ``0x01(attr1:编号01的机芯)`` , ``0x01(attr2:物理位置)`` ,
    ``0x10`` , ``0x27(0x2710=10000)``

0x02.设置
+++++++++++++

+--------------+----------+--------+----------------+
|     操作     | 接口索引 | 操作数 |      参数      |
+==============+==========+========+================+
| 设置         | 0x02     | 0x02   | 对象,属性,参数 |
+--------------+----------+--------+----------------+
| 返回 ``ACK`` | 0x02     | 0x02   | \              |
+--------------+----------+--------+----------------+

.. note::
  当设置为非正常走时模式，设备会启动一个 ``30`` 秒的超时定时器，
  超时后自动恢复正常模式。重发设置指令可以将超时重置为 ``30`` 秒。
  当需要维持所设置状态时，建议间隔 ``10`` 秒左右重复发送此命令。

例：
  * ``->MCU:`` ``fc`` , ``length=6`` , ``0x02`` , ``0x02`` ,
    ``0x01(attr1:编号01的机芯)`` , ``0x01(attr2:物理位置)`` ,
    ``0x10`` , ``0x27(0x2710=10000)``
  * ``MCU->:`` ``ACK``
