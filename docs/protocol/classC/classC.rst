

=================
Class C
=================

总览
#################

``Class C`` 为手表类蓝牙产品数据通信协议

为了满足如下需求设计此协议：

- 统一协议接口，使得研发、生产、测试和使用能够在统一的协议框架下进行。
- 提供一个具有后向兼容性的，可方便扩展，逻辑清晰的通用协议。
- 兼容BLE MTU为 ``20byte`` 的情形

需求定义
====================

本设计所需满足的需求如下：

 - 易解析
 - 可扩展
 - 后向兼容
 - 流量控制（同步、异步）

最近修订历史
====================

.. list-table::

    * - 日期
      - 备注
    * - 2020-01-20 
      - [v2.0.0](docs/classC/changelog.md)
    * - 2019-05-07 
      - [v1.0.4](docs/classC/changelog.md)
    * - 2018-11-28 
      - [v1.0.3](docs/classC/changelog.md)
    * - 2018-06-10 
      - [v1.0.1](docs/classC/changelog.md)
    * - 2017-10-29 
      - [v0.2.2](docs/classC/changelog.md)
    * - 2017-05-24 
      - [v0.2.1](docs/classC/changelog.md)
    * - 2016-05-29 
      - [v0.2](docs/classC/changelog.md)


数据帧结构
====================

.. list-table::

    * - byte
      - 0
      - 1
      - 2~n
    * - 内容
      - flowcontrol(流控)
      - length
      - payload

数据包内容
====================

数据包包含如下内容(括号中为长度)：

1. 流控信息 ``(1)``

    控制数据传输过程，提高传输可靠性，并完成差错控制

2. 数据包长度 ``(1)``

    定义当前数据包的长度

.. note::

    当传输数据包长度超过MTU长度时，第一包长度字节写入完整长度，
    后续包的长度字节均写入 ``0xFF`` ，表示为前一包内容的延续。
    最多支持长度为 ``254`` 的数据帧。

3. 载荷 ``(0~18)`` 

    数据载荷


向后兼容
====================

在两个设备建立连接时，需交流各自的版本。由移动端兼容设备端。

``[低功耗蓝牙接口]``
========================================

包含广播帧数据结构。使用的服务与特征的 ``uuid`` 和属性等信息。

``[设备信息列表]``
========================================

包含设备识别码对应的设备型号，以及外设配置和齿轮箱配置等参数。




内容
###################


+------+----------+----+
| 序号 | 内容     | 值 |
+======+==========+====+
| 0    | 流控     |    |
+------+----------+----+
| 1    | 载荷长度 |    |
+------+----------+----+
| 2    | 接口索引 |    |
+------+----------+----+
| 3    | 操作数   |    |
+------+----------+----+
| 4-n  | 参数     |    |
+------+----------+----+


时间日期 ``0x01`` 
=======================

0x01.获取当前时间日期
++++++++++++++++++++++++++++++++++++++++++++++++

发送：

+------+----------+------+
| 序号 |   内容   |  值  |
+======+==========+======+
| 2    | 接口索引 | 0x01 |
+------+----------+------+
| 3    | 操作数   | 0x01 |
+------+----------+------+
| 4    | 参数     | /    |
+------+----------+------+

返回：

+------+----------+---------+
| 序号 |   内容   |   值    |
+======+==========+=========+
| 2    | 接口索引 | 0x01    |
+------+----------+---------+
| 3    | 操作数   | 0x01    |
+------+----------+---------+
| 4    | 年       | 0~99    |
+------+----------+---------+
| 5    | 月       | 1~12    |
+------+----------+---------+
| 6    | 日       | 1~31    |
+------+----------+---------+
| 7    | 时       | 0~23    |
+------+----------+---------+
| 8    | 分       | 0~59    |
+------+----------+---------+
| 9    | 秒       | 0~59    |
+------+----------+---------+
| 10   | 时区时   | -12~+14 |
+------+----------+---------+
| 11   | 时区分   | -59~+59 |
+------+----------+---------+


.. note::

  + 返回的时间与日期均为 ``UTC时间`` ，时区使用 ``8位有符号数`` 表示，
    ``MCU`` 计算时区会使用时区时和时区分相加，请保证符号正确。  

  + ``-6`` , ``-30`` 表示 ``UTC-6:30`` ， ``+6`` , ``+30`` 表示 ``UTC+6:30``
  
  + ``-6`` , ``+30`` 会计算出 ``UTC-5:30`` 的结果，为保持代码的可读性，请勿如此使用  

  - 例：
    
    * ``->MCU:``  ``fc`` , ``length=2`` , ``0x01`` , ``0x01``

    * ``MCU->:``  ``fc`` , ``length=10`` , ``0x01`` , ``0x01`` , ``0x14`` (2020年) , ``0x0A`` (10月) , ``0x0F`` (15日) , ``hour`` , ``minute`` , ``sec`` , ``timezone-hr`` , ``timezone-min``   


0x02.设置当前时间与日期
++++++++++++++++++++++++++++++++++++++++++++++++

发送：

+------+----------+---------+
| 序号 |   内容   |   值    |
+======+==========+=========+
| 2    | 接口索引 | 0x01    |
+------+----------+---------+
| 3    | 操作数   | 0x01    |
+------+----------+---------+
| 4    | 年       | 0~99    |
+------+----------+---------+
| 5    | 月       | 1~12    |
+------+----------+---------+
| 6    | 日       | 1~31    |
+------+----------+---------+
| 7    | 时       | 0~23    |
+------+----------+---------+
| 8    | 分       | 0~59    |
+------+----------+---------+
| 9    | 秒       | 0~59    |
+------+----------+---------+
| 10   | 时区时   | -12~+14 |
+------+----------+---------+
| 11   | 时区分   | -59~+59 |
+------+----------+---------+

返回ACK：

+------+------+--------+
| 序号 | 内容 |   值   |
+======+======+========+
| 0    | 流控 | 同发送 |
+------+------+--------+
| 1    | 长度 | 0      |
+------+------+--------+


.. note::

  + 当未包含时区信息(长度为8)时，视参数时间为 ``本地时间`` ，否则为 ``UTC时间``   

  - 例1：  
    
    * ``->MCU:``  ``fc`` , ``length=8`` , ``0x01`` , ``0x02`` , ``year(0-99)`` , ``month`` , ``day`` , ``hour`` , ``minute`` , ``sec``   
    * ``MCU->:``  ``ACK``   

  - 例2：  
    
    * ``->MCU:``  ``fc`` , ``length=10`` , ``0x01`` , ``0x02`` , ``year(0-99)`` , ``month`` , ``day`` , ``hour`` , ``minute`` , ``sec`` , ``timezone-hr`` , ``timezone-min``   
    * ``MCU->:``  ``ACK``   


